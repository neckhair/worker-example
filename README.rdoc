== Worker Example

This little app demonstrates how the Clockwork and Sidekiq Gems work together.

== Getting Started

Before you can start, you have to install Redis first. You can do that by doing a <tt>brew install redis</tt> on OS X and <tt>sudo apt-get install redis-server</tt> on Ubuntu.

Then start Redis with the following command:
    redis-server

You can start the app by running the following command from the command line:

    bundle exec foreman start

Foreman will then start the following processes for you:

* Thin: Rails Application Server
* Sidekiq: Message processing server
* Clockwork: Some kind of a cron for Ruby

== What it does

=== Foreman
Foreman is responsible to start the servers. When you hit <tt>Ctrl-C</tt> foreman sends a SIGTERM signal to all processes.
Foreman is configured in link:Procfile.

=== Clockwork
Clockwork tells sidekiq every 10 seconds to calculate the prime numbers from 0 to 100.
Every 2 minutes it tells sidekiq to calculate the prime numbers from 0 to 10'000'000.
See the clockwork configuration in the file link:config/clock.rb.

=== Sidekiq
Sidekiq has 25 little elves who are permanently watching on a Redis queue for new messages. Clockwork sends a message into a queue
on the defined intervals. When a message arrives, one of the elves starts to work on the expected job.

You can see the job in link:app/workers/hard_worker.rb.
When you open link:http://localhost:3000/sidekiq in your browser you can see the queued jobs which sidekiq processes.

=== Redis
Redis is a (not that simple) server for key/value storage and inter-process-massaging. I keep it out of the Foreman Procfile so that
I can quit sidekiq properly before shutting down Redis.

=== Web Frontend
There is also a very simple web frontend: link:http://localhost:3000. When you click on Start the controller schedules a task for sidekiq.